#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;
var jade = require('jade');
var moment = require('moment');
var program = require('commander');
var wrench = require('wrench');

program
  .option('-o, --output <path>', 'Output Directory', './changes')
  .option('-t, --template <path>', 'Template Directory', path.join(__dirname, "../template"))
  .parse(process.argv);

var gitlog = spawn('git', [
  'log', 
  '--grep', '^!', 
  '--date', 'iso', 
  '--pretty=format:%ad\t%s\t%an__EOR__'
]);
var buffer = '';

gitlog.stdout.on('data', function(data) {
  buffer += data;
});

gitlog.stderr.on('data', function(data) {
  console.log('stderr: ' + data);
});

gitlog.on('close', function(code) {
  var logs = [];

  buffer.split("__EOR__").forEach(function(row) {
    var columns = row.trim().split('\t');

    if (columns.length === 3) {
      logs.push({
        date: moment(columns[0]),
        comment: columns[1].substring(1),
        author: columns[2],
      });
    }
  });

  if (logs.length === 0) {
    return;
  }

  wrench.copyDirSyncRecursive(program.template, program.output, {
    forceDelete: true
  });

  jade.renderFile(program.template + '/index.jade', { logs: logs }, function(err, html) {
    if (err) throw err;

    var output = path.join(program.output, 'index.html');

    fs.writeFile(output, html, function(err) {
      if (err) throw err;

      console.log('output to ' + output);
    });
  });
});
